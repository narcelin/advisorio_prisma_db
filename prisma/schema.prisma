generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model course {
  id         String    @id @default(uuid())
  created_at DateTime? @default(now())

  name                                                                   String?               @db.VarChar
  description                                                            String?
  teacher                                                                String?               @db.VarChar
  course_prerequisite_id                                                 Int?
  special_requirements                                                   Boolean?
  course_cluster                                                         Int?
  course_cluster_link                                                    course_cluster_link[]
  course_prerequisite_course_prerequisite_course_idTocourse              course_prerequisite[] @relation("course_prerequisite_course_idTocourse")
  course_prerequisite_course_prerequisite_prerequisite_course_idTocourse course_prerequisite[] @relation("course_prerequisite_prerequisite_course_idTocourse")
  courses_taken                                                          courses_taken[]
}

model course_cluster {
  id        String    @id @default(uuid())
  create_at DateTime? @default(now())

  title                      String?                      @db.VarChar
  requirements               String?
  course_cluster_link        course_cluster_link[]
  degree_course_cluster_link degree_course_cluster_link[]
}

model course_cluster_link {
  id         String    @id @default(uuid())
  created_at DateTime? @default(now())

  course_cluster_id String?
  course_id         String?
  course_cluster    course_cluster? @relation(fields: [course_cluster_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  course            course?         @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model course_prerequisite {
  id         String    @id @default(uuid())
  created_at DateTime? @default(now())

  course_id                                                 String?
  prerequisite_course_id                                    String?
  course_course_prerequisite_course_idTocourse              course? @relation("course_prerequisite_course_idTocourse", fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  course_course_prerequisite_prerequisite_course_idTocourse course? @relation("course_prerequisite_prerequisite_course_idTocourse", fields: [prerequisite_course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model courses_taken {
  id         String    @id @default(uuid())
  created_at DateTime? @default(now())

  student_id String?
  course_id  String?
  course     course?  @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student    student? @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model degree {
  id         String    @id @default(uuid())
  created_at DateTime? @default(now())

  title                      String?                      @db.VarChar
  description                String?
  degree_course_cluster_link degree_course_cluster_link[]
  student                    student[]
}

model degree_course_cluster_link {
  id        String    @id @default(uuid())
  create_at DateTime? @default(now())

  degree_id         String?
  course_cluster_id String?
  course_cluster    course_cluster? @relation(fields: [course_cluster_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  degree            degree?         @relation(fields: [degree_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model student {
  id         String    @id @default(uuid())
  created_at DateTime? @default(now())

  role          String?         @db.VarChar
  username      String?         @db.VarChar
  firstName     String?
  lastName      String?
  password      String?         @db.VarChar
  college_of    String?         @db.VarChar
  degree_id     String?
  courses_taken courses_taken[]
  degree        degree?         @relation(fields: [degree_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum Role {
  BASIC
  ADMIN
  ADVISOR
}
