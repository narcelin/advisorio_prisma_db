generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model student {
  id         String    @id @default(uuid())
  created_at DateTime? @default(now())
  // updated_at DateTime? @updatedAt  \\

  role       String? @db.VarChar
  username   String? @db.VarChar
  firstName  String?
  lastName   String?
  password   String? @db.VarChar
  college_of String? @db.VarChar

  //Relationships
  course_taken course_taken[]

  degree_id String?
  degree    degree? @relation(fields: [degree_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model degree {
  id         String    @id @default(uuid())
  created_at DateTime? @default(now())

  title       String? @db.VarChar
  description String?

  //RELATIONS
  student student[]

  degree_course_cluster_junction degree_course_cluster_junction[]
}

model degree_course_cluster_junction {
  id        String    @id @default(uuid())
  create_at DateTime? @default(now())

  //RELATIONS
  degree_id String
  degree    degree @relation(fields: [degree_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  course_cluster_id String
  course_cluster    course_cluster @relation(fields: [course_cluster_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model course_cluster {
  id        String    @id @default(uuid())
  create_at DateTime? @default(now())

  title        String? @db.VarChar
  requirements String?

  //RELATIONS
  degree_course_cluster_junction degree_course_cluster_junction[]
}

model course {
  id         String    @id @default(uuid())
  created_at DateTime? @default(now())

  name                 String?  @db.VarChar
  description          String?
  teacher              String?  @db.VarChar
  special_requirements Boolean?

  course_prerequisite_course_prerequisite_course_idTocourse              course_prerequisite[] @relation("course_prerequisite_course_idTocourse")
  course_prerequisite_course_prerequisite_prerequisite_course_idTocourse course_prerequisite[] @relation("course_prerequisite_prerequisite_course_idTocourse")
  course_taken                                                           course_taken[]
}

model course_prerequisite {
  id         String    @id @default(uuid())
  created_at DateTime? @default(now())

  course_id                                                 String?
  prerequisite_course_id                                    String?
  course_course_prerequisite_course_idTocourse              course? @relation("course_prerequisite_course_idTocourse", fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  course_course_prerequisite_prerequisite_course_idTocourse course? @relation("course_prerequisite_prerequisite_course_idTocourse", fields: [prerequisite_course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model course_taken {
  id         String    @id @default(uuid())
  created_at DateTime? @default(now())

  //Relations
  student_id String
  student    student @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  grade      Int?
  //credits earned?

  course_id String
  course    course @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum Role {
  BASIC
  ADMIN
  ADVISOR
}
